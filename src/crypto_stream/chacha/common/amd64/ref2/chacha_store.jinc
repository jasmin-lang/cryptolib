
///////////////////////////////////////////////////////////////////////////////
// store 'xor' ////////////////////////////////////////////////////////////////

inline fn __update_ptr_xor_ref2(reg u64 output plain len, inline int n) -> reg u64, reg u64, reg u64
{
  output += n;
  plain += n;
  len -= n;
  return output, plain, len;
}

// 64 bytes
inline fn __store_xor_ref2(regx u64 s_output s_plain s_len, reg u32[16] k, regx u32 k15) -> regx u64, regx u64, regx u64
{
  inline int i;
  reg u64[8] kk;
  reg u32 t;
  reg u64 output plain aux len;

  // i = 0 : 1 dead
  kk[0] = (64u) k[1];
  kk[0] <<= 32;
  aux = (64u)k[0];
  kk[0] ^= aux;
  plain = #MOVX(s_plain);
  kk[0] ^= (u64)[plain + 8*0];

  // i = 1 : 2 dead
  kk[1] = (64u) k[3];
  kk[1] <<= 32;
  aux = (64u)k[2];
  kk[1] ^= aux;
  kk[1] ^= (u64)[plain + 8*1];
  output = #MOVX(s_output);
  (u64)[output + 8*0] = kk[0];

  for i=2 to 8
  {
    //kk[i] = (64u)((i == 7) ? k15 : k[2*i+1]); // TODO CHECKME
    t = 0;
    if(i==7){ t = #MOV_32(k15); } else { t = k[2*i+1]; }
    kk[i] = (64u) t;
    // END TODO CHECKME

    kk[i] <<= 32;
    aux = (64u)k[2*i];
    kk[i] ^= aux;
    kk[i] ^= (u64)[plain + 8*i];
    (u64)[output + 8*(i-1)] = kk[i-1];
  }

  (u64)[output + 8*7] = kk[7];

  len = #MOVX(s_len);

  output, plain, len = __update_ptr_xor_ref2(output, plain, len, 64);

  s_output = #MOVX(output);
  s_plain = #MOVX(plain);
  s_len = #MOVX(len);

  return s_output, s_plain, s_len;
}

inline fn __sum_states_store_xor_ref2(
  regx u64 s_output s_plain s_len,
  reg u32[16] k, regx u32 k15,
  stack u32[16] st
) -> regx u64, regx u64, regx u64
{
  inline int i;
  reg u64[8] kk;
  reg u64 output plain aux len;

  // store                                        // sum states
  // i = 0 : 1 dead
                                                  k[1] += st[1];
                                                  k[0] += st[0];
  kk[0] = (64u) k[1];
  kk[0] <<= 32;
  aux = (64u)k[0];
  kk[0] ^= aux;
  plain = #MOVX(s_plain);
  kk[0] ^= (u64)[plain + 8*0];

  // i = 1 : 2 dead
                                                  k[3] += st[3];
                                                  k[2] += st[2];
  kk[1] = (64u) k[3];
  kk[1] <<= 32;
  aux = (64u)k[2];
  kk[1] ^= aux;
  kk[1] ^= (u64)[plain + 8*1];
  output = #MOVX(s_output);
  (u64)[output + 8*0] = kk[0];

  for i=2 to 8
  {
                                                  // k[2*i+1] = #MOVX_32(k15) if (2*i+1 == 15); TODO CHECKME
                                                  if(2*i+1 == 15) { k[2*i+1] = #MOVX_32(k15); }
                                                  // END TODO CHECKME
                                                  k[2*i+1] += st[2*i+1];
                                                  k[2*i] += st[2*i];
    kk[i] = (64u)(k[2*i+1]);
    kk[i] <<= 32;
    aux = (64u)k[2*i];
    kk[i] ^= aux;
    kk[i] ^= (u64)[plain + 8*i];
    (u64)[output + 8*(i-1)] = kk[i-1];
  }

  (u64)[output + 8*7] = kk[7];

  len = #MOVX(s_len);

  output, plain, len = __update_ptr_xor_ref2(output, plain, len, 64);

  s_output = #MOVX(output);
  s_plain = #MOVX(plain);
  s_len = #MOVX(len);

  return s_output, s_plain, s_len;
}

inline fn __store_xor_last_ref2(regx u64 s_output s_plain s_len, reg u32[16] k, regx u32 k15)
{
  inline int i;
  reg u64 t j output plain len len8;
  reg u32 u;
  stack u32[16] s_k;
  reg u8 pi;

  // copy k to stack
  for i=0 to 15
  { s_k[i] = k[i]; }
  u = #MOVX_32(k15); // TODO CHECKME
  s_k[15] = u;

  output = #MOVX(s_output);
  plain = #MOVX(s_plain);
  len = #MOVX(s_len);

  // u64 at a time
  len8 = len;
  len8 >>= 3;
  j = 0;
  while(j < len8)
  {
    t = (u64)[plain + 8*j];
    t ^= s_k[u64 (int)j];
    (u64)[output + 8*j] = t;
    j += 1;
  }
  j <<= 3;

  // u8 at a time
  while(j < len)
  {
    pi = (u8)[plain + j];
    pi ^= s_k[u8 (int)j];
    (u8)[output + j] = pi;
    j += 1;
  }
}


///////////////////////////////////////////////////////////////////////////////
// store //////////////////////////////////////////////////////////////////////

inline fn __update_ptr_ref2(reg u64 output len, inline int n) -> reg u64, reg u64
{
  output += n;
  len -= n;
  return output, len;
}

// 64 bytes
inline fn __store_ref2(regx u64 s_output s_len, reg u32[16] k, regx u32 k15) -> regx u64, regx u64
{
  inline int i;
  reg u64[8] kk;
  reg u64 output aux len;
  reg u32 t;

  // i = 0 : 1 dead
  kk[0] = (64u) k[1];
  kk[0] <<= 32;
  aux = (64u)k[0];
  kk[0] ^= aux;

  // i = 1 : 2 dead
  kk[1] = (64u) k[3];
  kk[1] <<= 32;
  aux = (64u)k[2];
  kk[1] ^= aux;
  output = #MOVX(s_output);
  (u64)[output + 8*0] = kk[0];

  for i=2 to 8
  {
    //kk[i] = (64u)((i == 7) ? #MOVX_32(k15) : k[2*i+1]); //TODO CHECKME
    t = 0;
    if(i==7){ t = #MOV_32(k15); } else { t = k[2*i+1]; }
    kk[i] = (64u) t;
    // TODO END CHECKME

    kk[i] <<= 32;
    aux = (64u)k[2*i];
    kk[i] ^= aux;
    (u64)[output + 8*(i-1)] = kk[i-1];
  }

  (u64)[output + 8*7] = kk[7];

  len = #MOVX(s_len);

  output, len = __update_ptr_ref2(output, len, 64);

  s_output = #MOVX(output);
  s_len = #MOVX(len);

  return s_output, s_len;
}

inline fn __sum_states_store_ref2(
  regx u64 s_output s_len,
  reg u32[16] k, regx u32 k15,
  stack u32[16] st
) -> regx u64, regx u64
{
  inline int i;
  reg u64[8] kk;
  reg u64 output aux len;

  // store                                        // sum states
  // i = 0 : 1 dead
                                                  k[1] += st[1];
                                                  k[0] += st[0];
  kk[0] = (64u) k[1];
  kk[0] <<= 32;
  aux = (64u)k[0];
  kk[0] ^= aux;

  // i = 1 : 2 dead
                                                  k[3] += st[3];
                                                  k[2] += st[2];
  kk[1] = (64u) k[3];
  kk[1] <<= 32;
  aux = (64u)k[2];
  kk[1] ^= aux;
  output = #MOVX(s_output);
  (u64)[output + 8*0] = kk[0];

  for i=2 to 8
  {
                                                  // k[2*i+1] = #MOVX_32(k15) if (2*i+1 == 15); // TODO CHECKME
                                                  if(2*i+1 == 15) { k[2*i+1] = #MOVX_32(k15); }
                                                  // TODO END CHECKME
                                                  k[2*i+1] += st[2*i+1];
                                                  k[2*i] += st[2*i];
    kk[i] = (64u)(k[2*i+1]);
    kk[i] <<= 32;
    aux = (64u)k[2*i];
    kk[i] ^= aux;
    (u64)[output + 8*(i-1)] = kk[i-1];
  }

  (u64)[output + 8*7] = kk[7];

  len = #MOVX(s_len);

  output, len = __update_ptr_ref2(output, len, 64);

  s_output = #MOVX(output);
  s_len = #MOVX(len);

  return s_output, s_len;
}

inline fn __store_last_ref2(regx u64 s_output s_len, reg u32[16] k, regx u32 k15)
{
  inline int i;
  reg u64 t j output len len8;
  reg u32 u;
  stack u32[16] s_k;
  reg u8 pi;

  // copy k to stack
  for i=0 to 15
  { s_k[i] = k[i]; }
  u = #MOVX_32(k15);
  s_k[15] = u;

  output = #MOVX(s_output);
  len = #MOVX(s_len);

  // u64 at a time
  len8 = len;
  len8 >>= 3;
  j = 0;
  while(j < len8)
  {
    t = s_k[u64 (int)j];
    (u64)[output + 8*j] = t;
    j += 1;
  }
  j <<= 3;

  // u8 at a time
  while(j < len)
  {
    pi = s_k[u8 (int)j];
    (u8)[output + j] = pi;
    j += 1;
  }
}

